{"version":3,"sources":["styles/global.ts","components/styles/content/index.ts","components/styles/title/index.ts","components/styles/card/index.ts","components/grid/styles/container/index.ts","components/grid/styles/row/index.ts","components/grid/block/styles/index.ts","components/grid/block/index.tsx","components/grid/index.tsx","utils/shuffle/index.ts","utils/is-in/row/index.ts","utils/is-in/col/index.ts","utils/identify-square/index.ts","utils/is-in/square/index.ts","utils/check-grid/index.ts","utils/fill-grid/index.ts","utils/copy-grid/index.ts","utils/full-grid/index.ts","utils/get-random-index/index.ts","utils/solve-grid/index.ts","utils/remove-numbers/index.ts","utils/compare-arrays/index.ts","components/styles/button/index.ts","components/numbers/styles/index.ts","components/numbers/index.tsx","components/styles/input/index.ts","components/complexityInput/index.tsx","components/newButton/index.tsx","App.tsx","utils/storage-helpers/index.ts","serviceWorker.ts","index.tsx","styles/theme.ts"],"names":["createGlobalStyle","theme","css","colors","background","black","styled","div","h1","white","active","bold","blue","transition","lightBlue","Block","colIndex","rowIndex","React","useContext","GridContext","workingGrid","selectedBlock","handleSelectBlock","challengeGrid","isSelected","isOriginalValue","onClick","Grid","handleFillValue","handleRemoveValue","useMousetrap","Children","toArray","Array","map","_","shuffle","array","i","length","j","Math","floor","random","lastI","isInRow","grid","value","includes","isInColumn","isInCol","identifySquare","square","x","push","isInSquare","checkGrid","numbers","fillGrid","row","col","copyGrid","gridCopy","r","c","emptyGrid","createFullGrid","getRandomIndex","solveGrid","globalCounter","counter","removeNumbers","attempts","backup","compareArrays","arr1","arr2","isArray","len","Button","button","Container","Numbers","n","key","Input","input","ComplexityInput","handleChange","placeholder","onChange","type","NewButton","useState","complexity","setComplexity","handleNewGame","style","display","e","target","window","confirm","parseInt","createContext","App","setSelectedBlock","setChallengeGrid","solvedGrid","setSolvedGrid","setWorkingGrid","solved","challenge","working","localStorage","setItem","JSON","stringify","saveState","useEffect","state","getItem","parse","getState","Provider","alert","newGrid","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.398ce85d.chunk.js","sourcesContent":["import { createGlobalStyle, css } from 'styled-components';\n\nexport default createGlobalStyle`\n${({ theme }) => css`\n  html {\n    height: 100%;\n\n    body {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      margin: 0;\n\n      #root {\n        background: ${theme.colors.background};\n        color: ${theme.colors.black};\n        display: flex;\n        font-family: sans-serif;\n        height: 100%;\n        justify-content: center;\n        padding: 15px;\n      }\n    }\n  }\n`}\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  max-width: 500px;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n`;\n","import styled, { css } from 'styled-components';\n\nexport default styled.h1`\n  ${({ theme }) => css`\n    color: ${theme.colors.white};\n    margin-top: 0;\n    text-align: center;\n  `}\n`;\n","import styled, { css } from 'styled-components';\n\nexport default styled.div`\n  ${({ theme }) => css`\n    background: ${theme.colors.white};\n    border-radius: 15px;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    max-height: fit-content;\n    padding: 15px;\n  `}\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 10px 0;\n`;\n","import styled, { css } from 'styled-components';\n\nexport default styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-flow: row;\n\n    &:nth-child(1) {\n      div {\n        border-top: 4px solid ${theme.colors.black};\n      }\n    }\n    &:nth-child(3),\n    &:nth-child(6) {\n      div {\n        border-bottom: 3px solid ${theme.colors.black};\n      }\n    }\n    &:nth-child(9) {\n      div {\n        border-bottom: 4px solid ${theme.colors.black};\n      }\n    }\n\n    div {\n      &:nth-child(1) {\n        border-left: 4px solid ${theme.colors.black};\n      }\n      &:nth-child(3),\n      &:nth-child(6),\n      &:nth-child(9) {\n        border-right: 4px solid ${theme.colors.black};\n      }\n      &:nth-child(4),\n      &:nth-child(7) {\n        border-left: none;\n      }\n    }\n  `}\n`;\n","import styled, { css } from 'styled-components';\n\ninterface IProps {\n  active?: boolean;\n  bold?: boolean;\n}\n\nexport default styled.div<IProps>`\n  ${({ theme, active, bold }) => css`\n    align-items: center;\n    background: ${active ? theme.colors.blue : theme.colors.white};\n    border: 1px solid ${theme.colors.black};\n    cursor: pointer;\n    display: flex;\n    flex: 1 0 0;\n    font-weight: ${bold ? 'bolder' : 'lighter'};\n    font-size: 20px;\n    height: auto;\n    justify-content: center;\n    transition: ${theme.transition};\n    user-select: none;\n\n    &:before {\n      padding-top: 100%;\n      content: '';\n      float: left;\n    }\n\n    &:hover {\n      background-color: ${theme.colors.lightBlue};\n    }\n  `}\n`;\n","import React from 'react';\nimport { GridContext } from 'App';\nimport { INDEX } from 'types';\nimport Container from './styles';\n\ninterface IProps {\n  colIndex: INDEX;\n  rowIndex: INDEX;\n}\n\nconst Block: React.FC<IProps> = ({ colIndex, rowIndex }) => {\n  const { workingGrid, selectedBlock, handleSelectBlock, challengeGrid } = React.useContext(\n    GridContext,\n  );\n  const isSelected = selectedBlock\n    ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex\n    : false;\n  const handleClick = () => {\n    if (!isSelected) {\n      handleSelectBlock(rowIndex, colIndex);\n    }\n  };\n  const isOriginalValue = !!(challengeGrid && challengeGrid[rowIndex][colIndex]);\n  return (\n    <Container active={isSelected} bold={isOriginalValue} onClick={handleClick}>\n      {workingGrid ? workingGrid[rowIndex][colIndex] || '' : ''}\n    </Container>\n  );\n};\n\nexport default Block;\n","import React from 'react';\nimport useMousetrap from 'react-hook-mousetrap';\nimport { INDEX } from 'types';\nimport { GridContext } from 'App';\nimport Container from './styles/container';\nimport Row from './styles/row';\nimport Block from './block';\n\nconst Grid: React.FC = () => {\n  const { selectedBlock, handleSelectBlock, handleFillValue, handleRemoveValue } = React.useContext(GridContext);\n  const moveDown = () => {\n    if (selectedBlock) {\n      const rowIndex = selectedBlock[0] + 1;\n      if (rowIndex <= 8 && rowIndex !== selectedBlock[0]) {\n        handleSelectBlock(rowIndex as INDEX, selectedBlock[1]);\n      }\n    }\n  };\n  const moveLeft = () => {\n    if (selectedBlock) {\n      const colIndex = selectedBlock[1] - 1;\n      if (colIndex >= 0 && colIndex !== selectedBlock[1]) {\n        handleSelectBlock(selectedBlock[0], colIndex as INDEX);\n      }\n    }\n  };\n  const moveUp = () => {\n    if (selectedBlock) {\n      const rowIndex = selectedBlock[0] - 1;\n      if (rowIndex >= 0 && rowIndex !== selectedBlock[0]) {\n        handleSelectBlock(rowIndex as INDEX, selectedBlock[1]);\n      }\n    }\n  };\n  const moveRight = () => {\n    if (selectedBlock) {\n      const colIndex = selectedBlock[1] + 1;\n      if (colIndex <= 8 && colIndex !== selectedBlock[1]) {\n        handleSelectBlock(selectedBlock[0], colIndex as INDEX);\n      }\n    }\n  };\n\n  useMousetrap('down', moveDown);\n  useMousetrap('left', moveLeft);\n  useMousetrap('right', moveRight);\n  useMousetrap('up', moveUp);\n  useMousetrap(['backspace', '0'], handleRemoveValue);\n  useMousetrap('1', () => handleFillValue(1));\n  useMousetrap('2', () => handleFillValue(2));\n  useMousetrap('3', () => handleFillValue(3));\n  useMousetrap('4', () => handleFillValue(4));\n  useMousetrap('5', () => handleFillValue(5));\n  useMousetrap('6', () => handleFillValue(6));\n  useMousetrap('7', () => handleFillValue(7));\n  useMousetrap('8', () => handleFillValue(8));\n  useMousetrap('9', () => handleFillValue(9));\n  return (\n    <Container>\n      {React.Children.toArray(\n        [...Array(9)].map((_, rowIndex) => (\n          <Row>\n            {React.Children.toArray(\n              [...Array(9)].map((_, colIndex) => (\n                <Block colIndex={colIndex as INDEX} rowIndex={rowIndex as INDEX} />\n              )),\n            )}\n          </Row>\n        )),\n      )}\n    </Container>\n  );\n};\n\nexport default Grid;\n","/* eslint-disable no-param-reassign */\nconst shuffle = (array: any[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const lastI = array[i];\n    array[i] = array[j];\n    array[j] = lastI;\n  }\n};\n\nexport default shuffle;\n","import { GRID, NUMBERS } from 'types';\n\ninterface IInput {\n  grid: GRID;\n  rowIndex: number;\n  value: NUMBERS;\n}\n\nconst isInRow = ({ grid, rowIndex, value }: IInput): boolean => grid[rowIndex].includes(value);\n\nexport default isInRow;\n","import { GRID, NUMBERS } from 'types';\n\ninterface IInput {\n  grid: GRID;\n  colIndex: number;\n  value: NUMBERS;\n}\n\nconst isInColumn = ({ grid, colIndex, value }: IInput): boolean => {\n  let isInCol = false;\n  for (let i = 0; i < 9; i++) {\n    if (value === grid[i][colIndex]) {\n      isInCol = true;\n    }\n  }\n  return isInCol;\n};\n\nexport default isInColumn;\n","import { GRID, SQUARE } from 'types';\n\ninterface IInput {\n  grid: GRID;\n  rowIndex: number;\n  colIndex: number;\n}\n\nconst identifySquare = ({ grid, rowIndex, colIndex }: IInput) => {\n  const square = [];\n  if (rowIndex < 3) {\n    if (colIndex < 3) {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\n      }\n    } else if (colIndex < 6) {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\n      }\n    } else {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\n      }\n    }\n  } else if (rowIndex < 6) {\n    if (colIndex < 3) {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\n      }\n    } else if (colIndex < 6) {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\n      }\n    } else {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\n      }\n    }\n  } else {\n    if (colIndex < 3) {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]]);\n      }\n    } else if (colIndex < 6) {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]]);\n      }\n    } else {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]]);\n      }\n    }\n  }\n  return square as SQUARE;\n};\n\nexport default identifySquare;\n","import { NUMBERS, SQUARE } from 'types';\n\ninterface IInput {\n  square: SQUARE;\n  value: NUMBERS;\n}\n\nconst isInSquare = ({ square, value }: IInput): boolean =>\n  [...square[0], ...square[1], ...square[2]].includes(value);\n\nexport default isInSquare;\n","import { GRID } from 'types';\n\nconst checkGrid = (grid: GRID): boolean => {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (grid[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nexport default checkGrid;\n","import { GRID, NUMBERS } from 'types';\nimport shuffle from 'utils/shuffle';\nimport isInRow from 'utils/is-in/row';\nimport isInColumn from 'utils/is-in/col';\nimport identifySquare from 'utils/identify-square';\nimport isInSquare from 'utils/is-in/square';\nimport checkGrid from 'utils/check-grid';\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst fillGrid = (grid: GRID) => {\n  let row = 0;\n  let col = 0;\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9);\n    col = i % 9;\n\n    if (grid[row][col] === 0) {\n      shuffle(numbers);\n\n      for (let value of numbers) {\n        if (!isInRow({ grid, rowIndex: row, value })) {\n          if (!isInColumn({ grid, colIndex: col, value })) {\n            const square = identifySquare({ grid, rowIndex: row, colIndex: col });\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value;\n              if (checkGrid(grid)) return true;\n              else if (fillGrid(grid)) return true;\n            }\n          }\n        }\n      }\n\n      break;\n    }\n  }\n  // eslint-disable-next-line no-param-reassign\n  grid[row][col] = 0;\n  return false;\n};\n\nexport default fillGrid;\n","import { GRID, INDEX } from 'types';\n\nconst copyGrid = (grid: GRID): GRID => {\n  const gridCopy: GRID = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ];\n\n  for (let r: INDEX = 0; r < 9; r++) {\n    for (let c: INDEX = 0; c < 9; c++) {\n      gridCopy[r][c] = grid[r][c];\n    }\n  }\n\n  return gridCopy;\n};\n\nexport default copyGrid;\n","import { GRID } from 'types';\nimport fillGrid from 'utils/fill-grid';\nimport copyGrid from 'utils/copy-grid';\n\nconst emptyGrid: GRID = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nconst createFullGrid = (): GRID => {\n  const grid = copyGrid(emptyGrid);\n  fillGrid(grid);\n\n  return grid;\n};\n\nexport default createFullGrid;\n","const getRandomIndex = () => Math.floor(Math.random() * 9);\n\nexport default getRandomIndex;\n","import { GRID, NUMBERS } from 'types';\nimport isInRow from 'utils/is-in/row';\nimport isInColumn from 'utils/is-in/col';\nimport identifySquare from 'utils/identify-square';\nimport isInSquare from 'utils/is-in/square';\nimport checkGrid from 'utils/check-grid';\nimport { globalCounter } from 'utils/remove-numbers';\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst solveGrid = (grid: GRID) => {\n  let row = 0;\n  let col = 0;\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9);\n    col = i % 9;\n\n    if (grid[row][col] === 0) {\n      for (let value of numbers) {\n        if (!isInRow({ grid, rowIndex: row, value })) {\n          if (!isInColumn({ grid, colIndex: col, value })) {\n            const square = identifySquare({ grid, colIndex: col, rowIndex: row });\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value;\n              if (checkGrid(grid)) {\n                globalCounter.counter++;\n                break;\n              } else if (solveGrid(grid)) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n\n  grid[row][col] = 0;\n};\n\nexport default solveGrid;\n","import { GRID } from 'types';\nimport getRandomIndex from 'utils/get-random-index';\nimport copyGrid from 'utils/copy-grid';\nimport solveGrid from 'utils/solve-grid';\n\nexport const globalCounter = {\n  counter: 0,\n};\n\nconst removeNumbers = (grid: GRID, attempts = 5): GRID => {\n  while (attempts > 0) {\n    let row = getRandomIndex();\n    let col = getRandomIndex();\n\n    while (grid[row][col] === 0) {\n      row = getRandomIndex();\n      col = getRandomIndex();\n    }\n\n    const backup = grid[row][col];\n    grid[row][col] = 0;\n\n    globalCounter.counter = 0;\n    const gridCopy = copyGrid(grid);\n\n    solveGrid(gridCopy);\n\n    // If it is not solved return removed number\n    // reduce no. of attempts\n    if (globalCounter.counter !== 1) {\n      grid[row][col] = backup;\n      attempts--;\n    }\n  }\n\n  return grid;\n};\n\nexport default removeNumbers;\n","const compareArrays = (arr1: any[], arr2: any[]): boolean => {\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) {\n    return arr1 === arr2;\n  }\n\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0, len = arr1.length; i < len; i++) {\n    if (!compareArrays(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport default compareArrays;\n","import styled, { css } from 'styled-components';\n\nconst Button = styled.button`\n  ${({ theme }) => css`\n    align-items: center;\n    background-color: ${theme.colors.black};\n    border: 2px solid ${theme.colors.black};\n    border-radius: 4px;\n    color: ${theme.colors.white};\n    cursor: pointer;\n    flex: 1;\n    font-size: 16px;\n    font-weight: bold;\n    height: 40px;\n    justify-content: center;\n    margin: 4px 2px;\n    min-height: 40px;\n    opacity: 0.9;\n    padding: 0;\n    transition: ${theme.transition};\n\n    &:focus {\n      border-color: ${theme.colors.blue};\n      outline: none;\n    }\n\n    &:hover {\n      opacity: 0.6;\n    }\n  `}\n`;\n\nexport default Button;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: row;\n`;\n\nexport default Container;\n","import React from 'react';\nimport Button from 'components/styles/button';\nimport { NUMBERS } from 'types';\nimport { GridContext } from 'App';\nimport Container from './styles';\n\nconst Numbers: React.FC = () => {\n  const { handleFillValue, handleRemoveValue } = React.useContext(GridContext);\n  return (\n    <Container>\n      {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map((n) => (\n        <Button key={n} onClick={() => handleFillValue(n)}>\n          {n}\n        </Button>\n      ))}\n      <Button onClick={handleRemoveValue}>-</Button>\n    </Container>\n  );\n};\n\nexport default Numbers;\n","import styled, { css } from 'styled-components';\n\nconst Input = styled.input`\n  ${({ theme }) => css`\n    border: 2px solid ${theme.colors.black};\n    border-radius: 4px;\n    color: ${theme.colors.black};\n    cursor: pointer;\n    flex: 1;\n    font-size: 16px;\n    font-weight: bold;\n    margin: 4px 2px;\n    padding: 9px 15px;\n    transition: ${theme.transition};\n\n    &:focus {\n      border-color: ${theme.colors.blue};\n      outline: none;\n    }\n  `}\n`;\n\nexport default Input;\n","import React from 'react';\nimport Input from '../styles/input';\n\ninterface IProps {\n  value: any;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst ComplexityInput = ({ value, handleChange }: IProps) => (\n  <Input placeholder=\"Complexity (default 5)\" value={value} onChange={handleChange} type=\"number\" />\n);\n\nexport default ComplexityInput;\n","import React from 'react';\nimport Button from 'components/styles/button';\nimport { GridContext } from 'App';\nimport ComplexityInput from 'components/complexityInput';\n\nconst NewButton: React.FC = () => {\n  const [complexity, setComplexity] = React.useState('');\n  const { handleNewGame } = React.useContext(GridContext);\n\n  const handleClick = () => {\n    if (window.confirm('Are you sure you want to start a new game?')) {\n      handleNewGame(parseInt(complexity, 10) || 5);\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <ComplexityInput value={complexity} handleChange={(e) => setComplexity(e.target.value)} />\n      <Button onClick={handleClick}>New Game</Button>\n    </div>\n  );\n};\n\nexport default NewButton;\n","import React from 'react';\nimport Content from 'components/styles/content';\nimport Title from 'components/styles/title';\nimport Card from 'components/styles/card';\nimport Grid from 'components/grid';\nimport createFullGrid from 'utils/full-grid';\nimport { BLOCK_COORDS, GRID, INDEX, NUMBERS } from 'types';\nimport removeNumbers from 'utils/remove-numbers';\nimport copyGrid from 'utils/copy-grid';\nimport compareArrays from 'utils/compare-arrays';\nimport isInRow from 'utils/is-in/row';\nimport isInColumn from 'utils/is-in/col';\nimport isInSquare from 'utils/is-in/square';\nimport identifySquare from 'utils/identify-square';\nimport Numbers from 'components/numbers';\nimport NewButton from 'components/newButton';\nimport { getState, saveState, saveWorkingState } from 'utils/storage-helpers';\n\ninterface IGridContext {\n  challengeGrid?: GRID;\n  solvedGrid?: GRID;\n  workingGrid?: GRID;\n  selectedBlock?: null | BLOCK_COORDS;\n  handleSelectBlock: (row: INDEX, col: INDEX) => void;\n  handleFillValue: (value: NUMBERS) => void;\n  handleRemoveValue: () => void;\n  handleNewGame: (complexity: number) => void;\n}\n\nexport const GridContext = React.createContext<IGridContext>({\n  handleSelectBlock: () => {},\n  handleFillValue: () => {},\n  handleRemoveValue: () => {},\n  handleNewGame: () => {},\n});\n\nconst emptyGrid: GRID = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nfunction App() {\n  const [selectedBlock, setSelectedBlock] = React.useState<null | BLOCK_COORDS>(null);\n  const [challengeGrid, setChallengeGrid] = React.useState<GRID>(emptyGrid);\n  const [solvedGrid, setSolvedGrid] = React.useState<GRID>(emptyGrid);\n  const [workingGrid, setWorkingGrid] = React.useState<GRID>(emptyGrid);\n\n  const handleNewGame = (complexity: number) => {\n    const solved = createFullGrid();\n    const gridCopy = copyGrid(solved);\n    const challenge = removeNumbers(gridCopy, complexity);\n    const working = copyGrid(challenge);\n    setChallengeGrid(challenge);\n    setSolvedGrid(solved);\n    setWorkingGrid(working);\n    saveState({ solvedGrid: solved, challengeGrid: challenge, workingGrid: working });\n  };\n\n  React.useEffect(() => {\n    const state = getState();\n    if (state) {\n      setSolvedGrid(state.solvedGrid);\n      setChallengeGrid(state.challengeGrid);\n      setWorkingGrid(state.workingGrid);\n    } else {\n      handleNewGame(5);\n    }\n  }, []);\n\n  const handleSelectBlock = (rowIndex: INDEX, colIndex: INDEX) => {\n    setSelectedBlock([rowIndex, colIndex]);\n  };\n  const handleFillValue = (value: NUMBERS) => {\n    if (selectedBlock) {\n      const row = selectedBlock[0];\n      const col = selectedBlock[1];\n      if (!isInRow({ grid: workingGrid, rowIndex: row, value })) {\n        if (!isInColumn({ grid: workingGrid, colIndex: col, value })) {\n          const square = identifySquare({ grid: workingGrid, colIndex: col, rowIndex: row });\n          if (!isInSquare({ square, value })) {\n            const newGrid = copyGrid(workingGrid);\n            newGrid[row][col] = value;\n            setWorkingGrid(newGrid);\n            saveWorkingState(newGrid);\n            if (compareArrays(newGrid, solvedGrid)) {\n              alert('Completed!');\n            }\n          } else {\n            alert('This value is already in this SQUARE!');\n          }\n        } else {\n          alert('This value is already in this COLUMN!');\n        }\n      } else {\n        alert('This value is already in this ROW!');\n      }\n    }\n  };\n\n  const handleRemoveValue = () => {\n    if (selectedBlock) {\n      const row = selectedBlock[0];\n      const col = selectedBlock[1];\n      if (!challengeGrid[row][col]) {\n        const newGrid = copyGrid(workingGrid);\n        newGrid[row][col] = 0;\n        setWorkingGrid(newGrid);\n      }\n    }\n  };\n\n  return (\n    <GridContext.Provider\n      value={{\n        challengeGrid,\n        solvedGrid,\n        workingGrid,\n        selectedBlock,\n        handleSelectBlock,\n        handleFillValue,\n        handleRemoveValue,\n        handleNewGame,\n      }}\n    >\n      <Content>\n        <Title>Sudoku</Title>\n        <Card>\n          <NewButton />\n          <Grid />\n          <Numbers />\n        </Card>\n      </Content>\n    </GridContext.Provider>\n  );\n}\n\nexport default App;\n","import { GRID } from 'types';\n\ninterface IState {\n  solvedGrid: GRID;\n  challengeGrid: GRID;\n  workingGrid: GRID;\n}\n\nconst SOLVED_GRID = 'solvedGrid';\nconst CHALLENGE_GRID = 'challengeGrid';\nconst WORKING_GRID = 'workingGrid';\n\nexport const saveState = ({ solvedGrid, challengeGrid, workingGrid }: IState) => {\n  localStorage.setItem(SOLVED_GRID, JSON.stringify(solvedGrid));\n  localStorage.setItem(CHALLENGE_GRID, JSON.stringify(challengeGrid));\n  localStorage.setItem(WORKING_GRID, JSON.stringify(workingGrid));\n};\n\nexport const saveWorkingState = (grid: GRID): void => {\n  localStorage.setItem(WORKING_GRID, JSON.stringify(grid));\n};\n\nexport const getState = (): null | IState => {\n  const solvedGrid = localStorage.getItem(SOLVED_GRID);\n  const challengeGrid = localStorage.getItem(CHALLENGE_GRID);\n  const workingGrid = localStorage.getItem(WORKING_GRID);\n  if (solvedGrid && challengeGrid && workingGrid) {\n    return {\n      solvedGrid: JSON.parse(solvedGrid),\n      challengeGrid: JSON.parse(challengeGrid),\n      workingGrid: JSON.parse(workingGrid),\n    };\n  }\n  return null;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyles from 'styles/global';\nimport theme from 'styles/theme';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <GlobalStyles />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n","export default {\n  colors: {\n    background: 'radial-gradient(#282c34cc, #282c34)',\n    black: '#282c34',\n    blue: '#a0e9fd',\n    lightBlue: '#caf3fe',\n    white: '#fff',\n  },\n  transition: '0.3s',\n};\n"],"sourceRoot":""}